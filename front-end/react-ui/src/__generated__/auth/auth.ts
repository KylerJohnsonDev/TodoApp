/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi | v1
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  AuthResponseDto,
  ChangePasswordDto,
  LoginDto,
  RegisterDto,
  ResetPasswordDto,
} from '.././model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const postApiAuthRegister = (
  registerDto: RegisterDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthResponseDto>> => {
  return axios.post(`/api/Auth/register`, registerDto, options);
};

export const getPostApiAuthRegisterMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthRegister>>,
    TError,
    { data: RegisterDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationKey = ['postApiAuthRegister'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthRegister>>,
    { data: RegisterDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRegister>>
>;
export type PostApiAuthRegisterMutationBody = RegisterDto;
export type PostApiAuthRegisterMutationError = AxiosError<unknown>;

export const usePostApiAuthRegister = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthRegister>>,
      TError,
      { data: RegisterDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthLogin = (
  loginDto: LoginDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthResponseDto>> => {
  return axios.post(`/api/Auth/login`, loginDto, options);
};

export const getPostApiAuthLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ['postApiAuthLogin'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginDto;
export type PostApiAuthLoginMutationError = AxiosError<unknown>;

export const usePostApiAuthLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthChangePassword = (
  changePasswordDto: ChangePasswordDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.post(`/api/Auth/change-password`, changePasswordDto, options);
};

export const getPostApiAuthChangePasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthChangePassword>>,
    TError,
    { data: ChangePasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthChangePassword>>,
  TError,
  { data: ChangePasswordDto },
  TContext
> => {
  const mutationKey = ['postApiAuthChangePassword'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthChangePassword>>,
    { data: ChangePasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthChangePassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthChangePassword>>
>;
export type PostApiAuthChangePasswordMutationBody = ChangePasswordDto;
export type PostApiAuthChangePasswordMutationError = AxiosError<unknown>;

export const usePostApiAuthChangePassword = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthChangePassword>>,
      TError,
      { data: ChangePasswordDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthChangePassword>>,
  TError,
  { data: ChangePasswordDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthResetPassword = (
  resetPasswordDto: ResetPasswordDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.post(`/api/Auth/reset-password`, resetPasswordDto, options);
};

export const getPostApiAuthResetPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthResetPassword>>,
    TError,
    { data: ResetPasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const mutationKey = ['postApiAuthResetPassword'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthResetPassword>>,
    { data: ResetPasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthResetPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>
>;
export type PostApiAuthResetPasswordMutationBody = ResetPasswordDto;
export type PostApiAuthResetPasswordMutationError = AxiosError<unknown>;

export const usePostApiAuthResetPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthResetPassword>>,
      TError,
      { data: ResetPasswordDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthLogout = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.post(`/api/Auth/logout`, undefined, options);
};

export const getPostApiAuthLogoutMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['postApiAuthLogout'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    void
  > = () => {
    return postApiAuthLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogout>>
>;

export type PostApiAuthLogoutMutationError = AxiosError<unknown>;

export const usePostApiAuthLogout = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthLogout>>,
      TError,
      void,
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiAuthProfile = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.get(`/api/Auth/profile`, options);
};

export const getGetApiAuthProfileQueryKey = () => {
  return [`/api/Auth/profile`] as const;
};

export const getGetApiAuthProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthProfile>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiAuthProfile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAuthProfile>>
  > = ({ signal }) => getApiAuthProfile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAuthProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthProfile>>
>;
export type GetApiAuthProfileQueryError = AxiosError<unknown>;

export function useGetApiAuthProfile<
  TData = Awaited<ReturnType<typeof getApiAuthProfile>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthProfile>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthProfile<
  TData = Awaited<ReturnType<typeof getApiAuthProfile>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthProfile>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthProfile<
  TData = Awaited<ReturnType<typeof getApiAuthProfile>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthProfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAuthProfile<
  TData = Awaited<ReturnType<typeof getApiAuthProfile>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthProfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAuthProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
