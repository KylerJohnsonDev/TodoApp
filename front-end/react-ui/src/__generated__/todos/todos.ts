/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi | v1
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateTodoDto,
  DeleteMultipleTodosDto,
  TodoResponseDto,
  UpdateTodoDto,
} from '.././model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiTodos = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto[]>> => {
  return axios.get(`/api/Todos`, options);
};

export const getGetApiTodosQueryKey = () => {
  return [`/api/Todos`] as const;
};

export const getGetApiTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTodos>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodos>>> = ({
    signal,
  }) => getApiTodos({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTodos>>
>;
export type GetApiTodosQueryError = AxiosError<unknown>;

export function useGetApiTodos<
  TData = Awaited<ReturnType<typeof getApiTodos>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTodos<
  TData = Awaited<ReturnType<typeof getApiTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTodos<
  TData = Awaited<ReturnType<typeof getApiTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiTodos<
  TData = Awaited<ReturnType<typeof getApiTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiTodosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiTodos = (
  createTodoDto: CreateTodoDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.post(`/api/Todos`, createTodoDto, options);
};

export const getPostApiTodosMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTodos>>,
    TError,
    { data: CreateTodoDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTodos>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationKey = ['postApiTodos'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTodos>>,
    { data: CreateTodoDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTodos(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTodosMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTodos>>
>;
export type PostApiTodosMutationBody = CreateTodoDto;
export type PostApiTodosMutationError = AxiosError<unknown>;

export const usePostApiTodos = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiTodos>>,
      TError,
      { data: CreateTodoDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiTodos>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationOptions = getPostApiTodosMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiTodosId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.get(`/api/Todos/${id}`, options);
};

export const getGetApiTodosIdQueryKey = (id?: number) => {
  return [`/api/Todos/${id}`] as const;
};

export const getGetApiTodosIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTodosId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTodosIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosId>>> = ({
    signal,
  }) => getApiTodosId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTodosId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTodosIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTodosId>>
>;
export type GetApiTodosIdQueryError = AxiosError<unknown>;

export function useGetApiTodosId<
  TData = Awaited<ReturnType<typeof getApiTodosId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTodosId<
  TData = Awaited<ReturnType<typeof getApiTodosId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTodosId<
  TData = Awaited<ReturnType<typeof getApiTodosId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiTodosId<
  TData = Awaited<ReturnType<typeof getApiTodosId>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiTodosIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiTodosId = (
  id: number,
  updateTodoDto: UpdateTodoDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.put(`/api/Todos/${id}`, updateTodoDto, options);
};

export const getPutApiTodosIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiTodosId>>,
    TError,
    { id: number; data: UpdateTodoDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiTodosId>>,
  TError,
  { id: number; data: UpdateTodoDto },
  TContext
> => {
  const mutationKey = ['putApiTodosId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiTodosId>>,
    { id: number; data: UpdateTodoDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiTodosId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiTodosIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiTodosId>>
>;
export type PutApiTodosIdMutationBody = UpdateTodoDto;
export type PutApiTodosIdMutationError = AxiosError<unknown>;

export const usePutApiTodosId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiTodosId>>,
      TError,
      { id: number; data: UpdateTodoDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiTodosId>>,
  TError,
  { id: number; data: UpdateTodoDto },
  TContext
> => {
  const mutationOptions = getPutApiTodosIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiTodosId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/Todos/${id}`, options);
};

export const getDeleteApiTodosIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiTodosId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiTodosId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiTodosId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiTodosId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiTodosId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiTodosIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiTodosId>>
>;

export type DeleteApiTodosIdMutationError = AxiosError<unknown>;

export const useDeleteApiTodosId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiTodosId>>,
      TError,
      { id: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiTodosId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiTodosIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiTodosBulk = (
  deleteMultipleTodosDto: DeleteMultipleTodosDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/Todos/bulk`, {
    data: deleteMultipleTodosDto,
    ...options,
  });
};

export const getDeleteApiTodosBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiTodosBulk>>,
    TError,
    { data: DeleteMultipleTodosDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiTodosBulk>>,
  TError,
  { data: DeleteMultipleTodosDto },
  TContext
> => {
  const mutationKey = ['deleteApiTodosBulk'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiTodosBulk>>,
    { data: DeleteMultipleTodosDto }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiTodosBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiTodosBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiTodosBulk>>
>;
export type DeleteApiTodosBulkMutationBody = DeleteMultipleTodosDto;
export type DeleteApiTodosBulkMutationError = AxiosError<unknown>;

export const useDeleteApiTodosBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiTodosBulk>>,
      TError,
      { data: DeleteMultipleTodosDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiTodosBulk>>,
  TError,
  { data: DeleteMultipleTodosDto },
  TContext
> => {
  const mutationOptions = getDeleteApiTodosBulkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
