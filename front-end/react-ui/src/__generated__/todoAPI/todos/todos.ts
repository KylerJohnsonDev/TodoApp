/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateTodoDto,
  DeleteMultipleTodosDto,
  TodoResponseDto,
  UpdateMultipleTodoStatusDto,
  UpdateTodoDto,
} from '../todoApi.schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getTodos = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto[]>> => {
  return axios.get(`/api/todos`, options);
};

export const getGetTodosQueryKey = () => {
  return [`/api/todos`] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({
    signal,
  }) => getTodos({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = AxiosError<unknown>;

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createTodo = (
  createTodoDto: CreateTodoDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.post(`/api/todos`, createTodoDto, options);
};

export const getCreateTodoMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodo>>,
    TError,
    { data: CreateTodoDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationKey = ['createTodo'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTodo>>,
    { data: CreateTodoDto }
  > = (props) => {
    const { data } = props ?? {};

    return createTodo(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTodo>>
>;
export type CreateTodoMutationBody = CreateTodoDto;
export type CreateTodoMutationError = AxiosError<unknown>;

export const useCreateTodo = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTodo>>,
      TError,
      { data: CreateTodoDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationOptions = getCreateTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getTodoById = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.get(`/api/todos/${id}`, options);
};

export const getGetTodoByIdQueryKey = (id?: number) => {
  return [`/api/todos/${id}`] as const;
};

export const getGetTodoByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoById>>> = ({
    signal,
  }) => getTodoById(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodoById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodoByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodoById>>
>;
export type GetTodoByIdQueryError = AxiosError<unknown>;

export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoById>>,
          TError,
          Awaited<ReturnType<typeof getTodoById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoById>>,
          TError,
          Awaited<ReturnType<typeof getTodoById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTodoById<
  TData = Awaited<ReturnType<typeof getTodoById>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTodoById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTodoByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateTodo = (
  id: number,
  updateTodoDto: UpdateTodoDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TodoResponseDto>> => {
  return axios.put(`/api/todos/${id}`, updateTodoDto, options);
};

export const getUpdateTodoMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: number; data: UpdateTodoDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: number; data: UpdateTodoDto },
  TContext
> => {
  const mutationKey = ['updateTodo'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodo>>,
    { id: number; data: UpdateTodoDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTodo(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodo>>
>;
export type UpdateTodoMutationBody = UpdateTodoDto;
export type UpdateTodoMutationError = AxiosError<unknown>;

export const useUpdateTodo = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTodo>>,
      TError,
      { id: number; data: UpdateTodoDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: number; data: UpdateTodoDto },
  TContext
> => {
  const mutationOptions = getUpdateTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteTodo = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/todos/${id}`, options);
};

export const getDeleteTodoMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodo>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteTodo'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTodo>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTodo(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodo>>
>;

export type DeleteTodoMutationError = AxiosError<unknown>;

export const useDeleteTodo = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTodo>>,
      TError,
      { id: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteTodoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteMultipleTodos = (
  deleteMultipleTodosDto: DeleteMultipleTodosDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/todos/bulk`, {
    data: deleteMultipleTodosDto,
    ...options,
  });
};

export const getDeleteMultipleTodosMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMultipleTodos>>,
    TError,
    { data: DeleteMultipleTodosDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMultipleTodos>>,
  TError,
  { data: DeleteMultipleTodosDto },
  TContext
> => {
  const mutationKey = ['deleteMultipleTodos'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMultipleTodos>>,
    { data: DeleteMultipleTodosDto }
  > = (props) => {
    const { data } = props ?? {};

    return deleteMultipleTodos(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMultipleTodosMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMultipleTodos>>
>;
export type DeleteMultipleTodosMutationBody = DeleteMultipleTodosDto;
export type DeleteMultipleTodosMutationError = AxiosError<unknown>;

export const useDeleteMultipleTodos = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMultipleTodos>>,
      TError,
      { data: DeleteMultipleTodosDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMultipleTodos>>,
  TError,
  { data: DeleteMultipleTodosDto },
  TContext
> => {
  const mutationOptions = getDeleteMultipleTodosMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateMultipleTodoStatus = (
  updateMultipleTodoStatusDto: UpdateMultipleTodoStatusDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.put(
    `/api/todos/bulk-status`,
    updateMultipleTodoStatusDto,
    options,
  );
};

export const getUpdateMultipleTodoStatusMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMultipleTodoStatus>>,
    TError,
    { data: UpdateMultipleTodoStatusDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMultipleTodoStatus>>,
  TError,
  { data: UpdateMultipleTodoStatusDto },
  TContext
> => {
  const mutationKey = ['updateMultipleTodoStatus'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMultipleTodoStatus>>,
    { data: UpdateMultipleTodoStatusDto }
  > = (props) => {
    const { data } = props ?? {};

    return updateMultipleTodoStatus(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMultipleTodoStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMultipleTodoStatus>>
>;
export type UpdateMultipleTodoStatusMutationBody = UpdateMultipleTodoStatusDto;
export type UpdateMultipleTodoStatusMutationError = AxiosError<unknown>;

export const useUpdateMultipleTodoStatus = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMultipleTodoStatus>>,
      TError,
      { data: UpdateMultipleTodoStatusDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMultipleTodoStatus>>,
  TError,
  { data: UpdateMultipleTodoStatusDto },
  TContext
> => {
  const mutationOptions = getUpdateMultipleTodoStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
