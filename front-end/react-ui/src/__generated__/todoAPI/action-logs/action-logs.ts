/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  ActionLogsResponseDto,
  GetAllActionLogsParams,
  GetUserActionLogsParams,
} from '../todoApi.schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getUserActionLogs = (
  params?: GetUserActionLogsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ActionLogsResponseDto>> => {
  return axios.get(`/api/action_logs`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetUserActionLogsQueryKey = (
  params?: GetUserActionLogsParams,
) => {
  return [`/api/action_logs`, ...(params ? [params] : [])] as const;
};

export const getGetUserActionLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUserActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserActionLogsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserActionLogs>>
  > = ({ signal }) => getUserActionLogs(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserActionLogs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserActionLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserActionLogs>>
>;
export type GetUserActionLogsQueryError = AxiosError<unknown>;

export function useGetUserActionLogs<
  TData = Awaited<ReturnType<typeof getUserActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetUserActionLogsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getUserActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserActionLogs<
  TData = Awaited<ReturnType<typeof getUserActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUserActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getUserActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserActionLogs<
  TData = Awaited<ReturnType<typeof getUserActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUserActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserActionLogs<
  TData = Awaited<ReturnType<typeof getUserActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetUserActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserActionLogsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAllActionLogs = (
  params?: GetAllActionLogsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ActionLogsResponseDto>> => {
  return axios.get(`/api/action_logs/all`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetAllActionLogsQueryKey = (
  params?: GetAllActionLogsParams,
) => {
  return [`/api/action_logs/all`, ...(params ? [params] : [])] as const;
};

export const getGetAllActionLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetAllActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllActionLogsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllActionLogs>>
  > = ({ signal }) => getAllActionLogs(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllActionLogs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllActionLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllActionLogs>>
>;
export type GetAllActionLogsQueryError = AxiosError<unknown>;

export function useGetAllActionLogs<
  TData = Awaited<ReturnType<typeof getAllActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetAllActionLogsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getAllActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllActionLogs<
  TData = Awaited<ReturnType<typeof getAllActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetAllActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getAllActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllActionLogs<
  TData = Awaited<ReturnType<typeof getAllActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetAllActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetAllActionLogs<
  TData = Awaited<ReturnType<typeof getAllActionLogs>>,
  TError = AxiosError<unknown>,
>(
  params?: GetAllActionLogsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllActionLogsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
