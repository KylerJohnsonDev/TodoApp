/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi | v1
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { ActionLogResponseDto } from '.././model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiActionLogs = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ActionLogResponseDto[]>> => {
  return axios.get(`/api/ActionLogs`, options);
};

export const getGetApiActionLogsQueryKey = () => {
  return [`/api/ActionLogs`] as const;
};

export const getGetApiActionLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiActionLogs>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiActionLogs>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiActionLogsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiActionLogs>>
  > = ({ signal }) => getApiActionLogs({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiActionLogs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiActionLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiActionLogs>>
>;
export type GetApiActionLogsQueryError = AxiosError<unknown>;

export function useGetApiActionLogs<
  TData = Awaited<ReturnType<typeof getApiActionLogs>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getApiActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiActionLogs<
  TData = Awaited<ReturnType<typeof getApiActionLogs>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiActionLogs>>,
          TError,
          Awaited<ReturnType<typeof getApiActionLogs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiActionLogs<
  TData = Awaited<ReturnType<typeof getApiActionLogs>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiActionLogs<
  TData = Awaited<ReturnType<typeof getApiActionLogs>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiActionLogsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiActionLogsAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ActionLogResponseDto[]>> => {
  return axios.get(`/api/ActionLogs/all`, options);
};

export const getGetApiActionLogsAllQueryKey = () => {
  return [`/api/ActionLogs/all`] as const;
};

export const getGetApiActionLogsAllQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiActionLogsAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiActionLogsAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiActionLogsAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiActionLogsAll>>
  > = ({ signal }) => getApiActionLogsAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiActionLogsAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiActionLogsAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiActionLogsAll>>
>;
export type GetApiActionLogsAllQueryError = AxiosError<unknown>;

export function useGetApiActionLogsAll<
  TData = Awaited<ReturnType<typeof getApiActionLogsAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogsAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiActionLogsAll>>,
          TError,
          Awaited<ReturnType<typeof getApiActionLogsAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiActionLogsAll<
  TData = Awaited<ReturnType<typeof getApiActionLogsAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogsAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiActionLogsAll>>,
          TError,
          Awaited<ReturnType<typeof getApiActionLogsAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiActionLogsAll<
  TData = Awaited<ReturnType<typeof getApiActionLogsAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogsAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiActionLogsAll<
  TData = Awaited<ReturnType<typeof getApiActionLogsAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiActionLogsAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiActionLogsAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
