/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * TodoApi
 * OpenAPI spec version: v1
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import type { TodoResponseDto } from '../todoApi.schemas';

export const getGetTodosResponseMock = () =>
  (() => {
    return Array.from({ length: 10 }, () => ({
      id: faker.number.int({ min: 1, max: 100 }),
      text: faker.lorem.sentence(),
      createdAt: faker.date.past(),
      status: faker.number.int({ min: 0, max: 2 }),
      completedAt: void 0,
    }));
  })();

export const getCreateTodoResponseMock = (
  overrideResponse: Partial<TodoResponseDto> = {},
): TodoResponseDto => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  text: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([0, 1, 2] as const),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  completedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTodoByIdResponseMock = (
  overrideResponse: Partial<TodoResponseDto> = {},
): TodoResponseDto => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  text: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([0, 1, 2] as const),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  completedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTodoResponseMock = (
  overrideResponse: Partial<TodoResponseDto> = {},
): TodoResponseDto => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  text: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([0, 1, 2] as const),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  completedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTodosMockHandler = (
  overrideResponse?:
    | TodoResponseDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TodoResponseDto[]> | TodoResponseDto[]),
) => {
  return http.get('*/api/Todos', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTodosResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCreateTodoMockHandler = (
  overrideResponse?:
    | TodoResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TodoResponseDto> | TodoResponseDto),
) => {
  return http.post('*/api/Todos', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTodoResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetTodoByIdMockHandler = (
  overrideResponse?:
    | TodoResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TodoResponseDto> | TodoResponseDto),
) => {
  return http.get('*/api/Todos/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTodoByIdResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getUpdateTodoMockHandler = (
  overrideResponse?:
    | TodoResponseDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TodoResponseDto> | TodoResponseDto),
) => {
  return http.put('*/api/Todos/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateTodoResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getDeleteTodoMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete('*/api/Todos/:id', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteMultipleTodosMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete('*/api/Todos/bulk', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getTodosMock = () => [
  getGetTodosMockHandler(),
  getCreateTodoMockHandler(),
  getGetTodoByIdMockHandler(),
  getUpdateTodoMockHandler(),
  getDeleteTodoMockHandler(),
  getDeleteMultipleTodosMockHandler(),
];
