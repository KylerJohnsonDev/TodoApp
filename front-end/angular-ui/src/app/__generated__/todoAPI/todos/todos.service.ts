/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoApi
 * OpenAPI spec version: v1
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  CreateTodoDto,
  DeleteMultipleTodosDto,
  TodoResponseDto,
  UpdateTodoDto,
} from '../todoApi.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class TodosService {
  private readonly http = inject(HttpClient);
  getTodos<TData = TodoResponseDto[]>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTodos<TData = TodoResponseDto[]>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTodos<TData = TodoResponseDto[]>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTodos<TData = TodoResponseDto[]>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/Todos`, options);
  }
  createTodo<TData = TodoResponseDto>(
    createTodoDto: CreateTodoDto,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  createTodo<TData = TodoResponseDto>(
    createTodoDto: CreateTodoDto,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  createTodo<TData = TodoResponseDto>(
    createTodoDto: CreateTodoDto,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  createTodo<TData = TodoResponseDto>(
    createTodoDto: CreateTodoDto,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/Todos`, createTodoDto, options);
  }
  getTodoById<TData = TodoResponseDto>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTodoById<TData = TodoResponseDto>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTodoById<TData = TodoResponseDto>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTodoById<TData = TodoResponseDto>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/Todos/${id}`, options);
  }
  updateTodo<TData = TodoResponseDto>(
    id: number,
    updateTodoDto: UpdateTodoDto,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  updateTodo<TData = TodoResponseDto>(
    id: number,
    updateTodoDto: UpdateTodoDto,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  updateTodo<TData = TodoResponseDto>(
    id: number,
    updateTodoDto: UpdateTodoDto,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  updateTodo<TData = TodoResponseDto>(
    id: number,
    updateTodoDto: UpdateTodoDto,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(`/api/Todos/${id}`, updateTodoDto, options);
  }
  deleteTodo<TData = null>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTodo<TData = null>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTodo<TData = null>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTodo<TData = null>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/Todos/${id}`, options);
  }
  deleteMultipleTodos<TData = null>(
    deleteMultipleTodosDto: DeleteMultipleTodosDto,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteMultipleTodos<TData = null>(
    deleteMultipleTodosDto: DeleteMultipleTodosDto,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteMultipleTodos<TData = null>(
    deleteMultipleTodosDto: DeleteMultipleTodosDto,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteMultipleTodos<TData = null>(
    deleteMultipleTodosDto: DeleteMultipleTodosDto,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/Todos/bulk`, {
      body: deleteMultipleTodosDto,
      ...options,
    });
  }
}

export type GetTodosClientResult = NonNullable<TodoResponseDto[]>;
export type CreateTodoClientResult = NonNullable<TodoResponseDto>;
export type GetTodoByIdClientResult = NonNullable<TodoResponseDto>;
export type UpdateTodoClientResult = NonNullable<TodoResponseDto>;
export type DeleteTodoClientResult = never;
export type DeleteMultipleTodosClientResult = never;
